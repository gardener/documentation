#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

set -e

if [[ $(uname) == 'Darwin' ]]; then
  READLINK_BIN="greadlink"
else
  READLINK_BIN="readlink"
fi

getGitHubToken() {
  # Check if gardener-ci is available (in local setup)
  command -v gardener-ci >/dev/null && gardenci="true" || gardenci=""
  if [[ $gardenci == "true" ]]; then
    # Get a (round-robin) random technical GitHub user credentials
    technicalUser=$(gardener-ci config model_element --cfg-type github --cfg-name "${1}" --key credentials | sed -e "s/^GithubCredentials //" -e "s/'/\"/g")
    if [[ -n "${technicalUser}" ]]; then
      # get auth token and strip lead/trail quotes
      authToken=$(jq -r '.authToken' <<<"$technicalUser")
      echo "${authToken}"
    fi
  fi
}

REPO_PATH="$(${READLINK_BIN} -f "$(dirname "${0}")/..")"
cd "${REPO_PATH}"

# Set config file
tmpConfigPath=$("mktemp")
function cleanup {
  rm -rf "$tmpConfigPath"
}
trap cleanup EXIT ERR INT TERM

cat << EOF >"$tmpConfigPath"
resourceMappings:
  "https://github.com/gardener/documentation": "${REPO_PATH}"
EOF
echo "Resource Mapping:"
cat "$tmpConfigPath"

export DOCFORGE_CONFIG="${tmpConfigPath}"

# Set cache dir
if [[ -d "${HOME}/.docforge" ]]; then
  docforgeCacheDir="${HOME}/.docforge"
else
  docforgeCacheDir="${REPO_PATH}/../.docforge"
fi

if [[ ! -d "${docforgeCacheDir}" ]]; then
  echo "creating cache dir: ${docforgeCacheDir}"
  mkdir -p "${docforgeCacheDir}"
fi

export DOCFORGE_CACHE_DIR="${docforgeCacheDir}"
echo "cache dir is set to: ${docforgeCacheDir}"

echo "Running docforge command..."
docforge \
  -f "https://github.com/gardener/documentation/blob/master/.docforge/website.yaml" \
  -d tmp \
  --github-oauth-token-map "github.com=${GITHUB_OAUTH_TOKEN:-$(getGitHubToken github_com)}" \
  --hugo \
  --dry-run
